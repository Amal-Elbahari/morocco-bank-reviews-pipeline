import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy.exc import OperationalError
from datetime import datetime

# Charger le fichier CSV des avis extraits
df = pd.read_csv("/home/amal/airflow/scriptsnew/bank_reviews.csv", encoding="utf-8")

# Connexion √† PostgreSQL
db_url = 'postgresql://postgres:2024@localhost:5432/final'  # Remplacer par tes informations

def check_postgres_connection(db_url):
    try:
        # Essayer de se connecter √† la base de donn√©es
        engine = create_engine(db_url)
        connection = engine.connect()
        connection.close()
        print("‚úÖ Connexion √† PostgreSQL r√©ussie !")
    except OperationalError as e:
        print(f"üö® Erreur de connexion √† PostgreSQL : {e}")
        raise

# V√©rifier la connexion √† PostgreSQL avant de charger les donn√©es
check_postgres_connection(db_url)

# Connexion √† PostgreSQL avec SQLAlchemy
engine = create_engine(db_url)

try:
    # Charger les donn√©es dans une table nomm√©e 'rev' (ajouter si elle n'existe pas)
    # Utilisation de chunksize pour am√©liorer les performances avec de grands ensembles de donn√©es
    df.to_sql('rev', con=engine, if_exists='append', index=False, chunksize=1000)
    print("‚úÖ Donn√©es charg√©es avec succ√®s dans PostgreSQL.")
except Exception as e:
    print(f"üö® Erreur lors du chargement des donn√©es dans PostgreSQL : {e}")
